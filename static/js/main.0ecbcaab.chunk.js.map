{"version":3,"sources":["AddItemForm.tsx","EditableSpan.tsx","Todolist.tsx","AppBar.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AddItemForm","props","useState","title","setTitle","error","setError","addItem","trim","TextField","value","onChange","e","currentTarget","onKeyPress","charCode","id","label","variant","size","Button","onClick","style","maxWidth","maxHeight","minWidth","minHeight","className","EditableSpan","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Todolist","changeTodolistTitle","IconButton","aria-label","Delete","removeTodolist","addTask","tasks","map","t","key","isDone","Checkbox","newIsDoneValue","checked","changeTaskStatus","newValue","changeTaskTitle","removeTask","filter","color","changeFilter","ButtonAppBar","Box","sx","flexGrow","AppBar","position","Toolbar","edge","mr","Typography","component","App","todolistId","todolistTasks","setTasks","task","v1","todolist","todolists","find","tl","setTodolists","changeStatus","newTitle","todolistId1","todolistId2","newTodolistId","allTodolistTasks","tasksForTodolist","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"sUAQO,SAASA,EAAYC,GAA8B,IAAD,EAE7BC,mBAAS,IAFoB,mBAEhDC,EAFgD,KAEzCC,EAFyC,OAG7BF,oBAAkB,GAHW,mBAGhDG,EAHgD,KAGzCC,EAHyC,KAK/CC,EAAU,WACS,KAAjBJ,EAAMK,QACNP,EAAMM,QAAQJ,GACdC,EAAS,KAETE,GAAS,IAejB,OAAO,6BACH,kBAACG,EAAA,EAAD,CAAWC,MAAOP,EACPQ,SAbS,SAACC,GACrBR,EAASQ,EAAEC,cAAcH,QAadI,WAVW,SAACF,GACvBN,GAAS,GACU,KAAfM,EAAEG,UACFR,KAQOF,QAAOA,EACPW,GAAG,iBACHC,MAAQZ,EAAwB,2GAAjB,4EACfa,QAAQ,WACRC,KAAK,UAEhB,kBAACC,EAAA,EAAD,CAAQF,QAAQ,YAAYG,QAASd,EAC7Be,MAAO,CAACC,SAAU,OAAQC,UAAW,OAAQC,SAAU,OAAQC,UAAW,SADlF,KAECrB,GAAS,yBAAKsB,UAAU,iBAAiBtB,ICtC3C,SAASuB,EAAa3B,GAA+B,IAAD,EACzBC,oBAAS,GADgB,mBAClD2B,EADkD,KACxCC,EADwC,OAE/B5B,mBAASD,EAAMS,OAFgB,mBAElDP,EAFkD,KAE3CC,EAF2C,KAgBvD,OAAOyB,EACD,2BAAOnB,MAAOP,EAAOQ,SALP,SAACC,GACjBR,EAASQ,EAAEC,cAAcH,QAIqBqB,WAAS,EAACC,OATnC,WACrBF,GAAY,GACZ7B,EAAMU,SAASR,MAQb,0BAAM8B,cAda,WACrBH,GAAY,GACZ1B,EAASH,EAAMS,SAY2BT,EAAMS,O,+BCGjD,SAASwB,EAASjC,GAgBrB,OAAO,6BACH,4BAAI,kBAAC2B,EAAD,CAAclB,MAAOT,EAAME,MAAOQ,SATd,SAACR,GACzBF,EAAMkC,oBAAoBlC,EAAMe,GAAIb,MAShC,kBAACiC,EAAA,EAAD,CAAYC,aAAW,UACnB,kBAACC,EAAA,EAAD,CAAQjB,QAdG,WACnBpB,EAAMsC,eAAetC,EAAMe,SAgB3B,kBAAChB,EAAD,CAAaO,QArBD,SAACJ,GACbF,EAAMuC,QAAQrC,EAAOF,EAAMe,OAqB3B,4BAEQf,EAAMwC,MAAMC,KAAI,SAAAC,GAWZ,OAAO,wBAAIC,IAAKD,EAAE3B,GAAIW,UAAWgB,EAAEE,OAAS,UAAY,IAGpD,kBAACC,EAAA,EAAD,CAAUnC,SAZU,SAACC,GACrB,IAAImC,EAAiBnC,EAAEC,cAAcmC,QACrC/C,EAAMgD,iBAAiBN,EAAE3B,GAAI+B,EAAgB9C,EAAMe,KAUdgC,QAASL,EAAEE,SAEhD,kBAACjB,EAAD,CAAclB,MAAOiC,EAAExC,MAAOQ,SAVL,SAACuC,GAC1BjD,EAAMkD,gBAAgBR,EAAE3B,GAAIkC,EAAUjD,EAAMe,OAU5C,kBAACoB,EAAA,EAAD,CAAYC,aAAW,UACnB,kBAACC,EAAA,EAAD,CAAQjB,QAjBO,kBAAMpB,EAAMmD,WAAWT,EAAE3B,GAAIf,EAAMe,aAuBtE,6BACI,kBAACI,EAAA,EAAD,CAAQF,QAA0B,QAAjBjB,EAAMoD,OAAmB,WAAa,YAAaC,MAAM,UAClEjC,QAvCU,kBAAMpB,EAAMsD,aAAa,MAAOtD,EAAMe,MAsCxD,sBAIA,kBAACI,EAAA,EAAD,CAAQF,QAA0B,WAAjBjB,EAAMoD,OAAsB,WAAa,YAAaC,MAAM,QACrEjC,QA1Ca,kBAAMpB,EAAMsD,aAAa,SAAUtD,EAAMe,MAyC9D,oDAIA,kBAACI,EAAA,EAAD,CAAQF,QAA0B,cAAjBjB,EAAMoD,OAAyB,WAAa,YAAaC,MAAM,YACxEjC,QA7CgB,kBAAMpB,EAAMsD,aAAa,YAAatD,EAAMe,MA4CpE,wE,kEC7EG,SAASwC,IACpB,OACI,gBAACC,EAAA,EAAD,CAAKC,GAAI,CAAEC,SAAU,IACjB,gBAACC,EAAA,EAAD,CAAQC,SAAS,UACb,gBAACC,EAAA,EAAD,KACI,gBAAC1B,EAAA,EAAD,CACIjB,KAAK,QACL4C,KAAK,QACLT,MAAM,UACNjB,aAAW,OACXqB,GAAI,CAAEM,GAAI,IAEV,gBAAC,IAAD,OAEJ,gBAACC,EAAA,EAAD,CAAY/C,QAAQ,KAAKgD,UAAU,MAAMR,GAAI,CAAEC,SAAU,IAAzD,uEAGA,gBAACvC,EAAA,EAAD,CAAQkC,MAAM,WAAd,YC4ILa,MAnJf,WAAgB,IAAD,EACX,SAASf,EAAWpC,EAAYoD,GAE5B,IAAIC,EAAgB5B,EAAM2B,GAE1B3B,EAAM2B,GAAcC,EAAchB,QAAO,SAAAV,GAAC,OAAIA,EAAE3B,KAAOA,KAEvDsD,EAAS,eAAI7B,IAGjB,SAASD,EAAQrC,EAAeiE,GAC5B,IAAIG,EAAO,CAACvD,GAAIwD,cAAMrE,MAAOA,EAAO0C,QAAQ,GAExCwB,EAAgB5B,EAAM2B,GAE1B3B,EAAM2B,GAAN,CAAqBG,GAArB,mBAA8BF,IAE9BC,EAAS,eAAI7B,IAGjB,SAASc,EAAa7C,EAAyB0D,GAC3C,IAAIK,EAAWC,EAAUC,MAAK,SAAAC,GAAE,OAAIA,EAAG5D,KAAOoD,KAC1CK,IACAA,EAASpB,OAAS3C,EAClBmE,EAAa,YAAIH,KAIzB,SAASI,EAAa9D,EAAY6B,EAAiBuB,GAE/C,IAEIG,EAFgB9B,EAAM2B,GAEDO,MAAK,SAAAhC,GAAC,OAAIA,EAAE3B,KAAOA,KAExCuD,IACAA,EAAK1B,OAASA,EAEdyB,EAAS,eAAI7B,KAIrB,SAASU,EAAgBnC,EAAY+D,EAAkBX,GAEnD,IAEIG,EAFgB9B,EAAM2B,GAEDO,MAAK,SAAAhC,GAAC,OAAIA,EAAE3B,KAAOA,KAExCuD,IACAA,EAAKpE,MAAQ4E,EAEbT,EAAS,eAAI7B,KAIrB,SAASF,EAAevB,GAEpB6D,EAAaH,EAAUrB,QAAO,SAAAuB,GAAE,OAAIA,EAAG5D,KAAOA,aAEvCyB,EAAMzB,GAEbsD,EAAS,eAAI7B,IAGjB,SAASN,EAAoBnB,EAAYb,GAErC,IAAMsE,EAAWC,EAAUC,MAAK,SAAAC,GAAE,OAAIA,EAAG5D,KAAOA,KAC5CyD,IAEAA,EAAStE,MAAQA,EACjB0E,EAAa,YAAIH,KAIzB,IAAIM,EAAcR,cACdS,EAAcT,cA1EP,EA4EqBtE,mBAA8B,CAC1D,CAACc,GAAIgE,EAAa7E,MAAO,iEAAgBkD,OAAQ,OACjD,CAACrC,GAAIiE,EAAa9E,MAAO,2DAAekD,OAAQ,SA9EzC,mBA4ENqB,EA5EM,KA4EKG,EA5EL,OAiFa3E,oBAAQ,mBAC3B8E,EAAc,CACX,CAAChE,GAAIwD,cAAMrE,MAAO,kFAAuB0C,QAAQ,GACjD,CAAC7B,GAAIwD,cAAMrE,MAAO,6DAAiB0C,QAAQ,GAC3C,CAAC7B,GAAIwD,cAAMrE,MAAO,wGAA8B0C,QAAQ,KAJhC,cAM3BoC,EAAc,CACX,CAACjE,GAAIwD,cAAMrE,MAAO,8FAAoB0C,QAAQ,GAC9C,CAAC7B,GAAIwD,cAAMrE,MAAO,4EAAiB0C,QAAQ,GAC3C,CAAC7B,GAAIwD,cAAMrE,MAAO,4EAAiB0C,QAAQ,KATnB,IAjFrB,mBAiFNJ,EAjFM,KAiFC6B,EAjFD,KAwGX,OACI,oCACI,kBAACd,EAAD,MACA,yBAAK7B,UAAU,OACX,6BACI,oJACA,kBAAC3B,EAAD,CAAaO,QAhB7B,SAAqBJ,GACjB,IAAI+E,EAAgBV,cAEpBK,EAAa,CADmB,CAAC7D,GAAIkE,EAAe/E,MAAOA,EAAOkD,OAAQ,QAC9D,mBAAkBqB,KAC9BJ,EAAS,eACF7B,EADC,eAEHyC,EAAgB,UAaTR,EAAUhC,KAAI,SAAAkC,GACV,IAAIO,EAAmB1C,EAAMmC,EAAG5D,IAC5BoE,EAAmBD,EASvB,MAPkB,WAAdP,EAAGvB,SACH+B,EAAmBD,EAAiB9B,QAAO,SAAAV,GAAC,OAAiB,IAAbA,EAAEE,WAEpC,cAAd+B,EAAGvB,SACH+B,EAAmBD,EAAiB9B,QAAO,SAAAV,GAAC,OAAiB,IAAbA,EAAEE,WAG/C,kBAACX,EAAD,CACHU,IAAKgC,EAAG5D,GACRA,GAAI4D,EAAG5D,GACPb,MAAOyE,EAAGzE,MACVsC,MAAO2C,EACPhC,WAAYA,EACZG,aAAcA,EACdf,QAASA,EACTS,iBAAkB6B,EAClBzB,OAAQuB,EAAGvB,OACXd,eAAgBA,EAChBY,gBAAiBA,EACjBhB,oBAAqBA,UC/I7BkD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAUC,SAASC,eAAe,SDqI5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA/F,GACLgG,QAAQhG,MAAMA,EAAMiG,c","file":"static/js/main.0ecbcaab.chunk.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {Button, TextField} from \"@mui/material\";\r\n\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport function AddItemForm(props: AddItemFormPropsType) {\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<boolean>(false)\r\n\r\n    const addItem = () => {\r\n        if (title.trim() !== \"\") {\r\n            props.addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(true);\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setError(false);\r\n        if (e.charCode === 13) {\r\n            addItem();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   error={error ? true : false}\r\n                   id=\"standard-basic\"\r\n                   label={!error? \"Введите текст\": \"Требуется название!\"}\r\n                   variant=\"standard\"\r\n                   size=\"small\"/>\r\n        {/*        <button onClick={addItem}>+</button>*/}\r\n        <Button variant=\"contained\" onClick={addItem}\r\n                style={{maxWidth: '38px', maxHeight: '38px', minWidth: '38px', minHeight: '38px'}}>+</Button>\r\n        {error && <div className=\"error-message\">{error}</div>}\r\n    </div>\r\n}\r\n","import React, {ChangeEvent, useState} from 'react';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport function EditableSpan(props: EditableSpanPropsType) {\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ? <input value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode}/>\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n}\r\n","import React, {ChangeEvent} from 'react';\r\nimport {FilterValuesType} from './App';\r\nimport {AddItemForm} from './AddItemForm';\r\nimport {EditableSpan} from './EditableSpan';\r\nimport {Button, Checkbox, FormControlLabel, FormGroup, IconButton, TextField} from \"@mui/material\";\r\nimport {Delete} from \"@mui/icons-material\";\r\n\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, isDone: boolean, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    filter: FilterValuesType\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n}\r\n\r\nexport function Todolist(props: PropsType) {\r\n    const addTask = (title: string) => {\r\n        props.addTask(title, props.id);\r\n    }\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.id);\r\n    }\r\n    const changeTodolistTitle = (title: string) => {\r\n        props.changeTodolistTitle(props.id, title);\r\n    }\r\n\r\n    const onAllClickHandler = () => props.changeFilter(\"all\", props.id);\r\n    const onActiveClickHandler = () => props.changeFilter(\"active\", props.id);\r\n    const onCompletedClickHandler = () => props.changeFilter(\"completed\", props.id);\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.title} onChange={changeTodolistTitle}/>\r\n            <IconButton aria-label=\"delete\">\r\n                <Delete onClick={removeTodolist}/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask}/>\r\n        <ul>\r\n            {\r\n                props.tasks.map(t => {\r\n                    const onClickHandler = () => props.removeTask(t.id, props.id)\r\n                    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n                        let newIsDoneValue = e.currentTarget.checked;\r\n                        props.changeTaskStatus(t.id, newIsDoneValue, props.id);\r\n                    }\r\n                    const onTitleChangeHandler = (newValue: string) => {\r\n                        props.changeTaskTitle(t.id, newValue, props.id);\r\n                    }\r\n\r\n\r\n                    return <li key={t.id} className={t.isDone ? \"is-done\" : \"\"}>\r\n{/*                        <input type=\"checkbox\" onChange={onChangeHandler} checked={t.isDone}/>*/}\r\n\r\n                        <Checkbox onChange={onChangeHandler} checked={t.isDone}/>\r\n\r\n                        <EditableSpan value={t.title} onChange={onTitleChangeHandler}/>\r\n                        <IconButton aria-label=\"delete\">\r\n                            <Delete onClick={onClickHandler}/>\r\n                        </IconButton>\r\n                    </li>\r\n                })\r\n            }\r\n        </ul>\r\n        <div>\r\n            <Button variant={props.filter === 'all' ? \"outlined\" : \"contained\"} color=\"success\"\r\n                    onClick={onAllClickHandler}>\r\n                Все\r\n            </Button>\r\n            <Button variant={props.filter === 'active' ? \"outlined\" : \"contained\"} color=\"error\"\r\n                    onClick={onActiveClickHandler}>\r\n                Активные\r\n            </Button>\r\n            <Button variant={props.filter === 'completed' ? \"outlined\" : \"contained\"} color=\"secondary\"\r\n                    onClick={onCompletedClickHandler}>\r\n                Завершённые\r\n            </Button>\r\n            {/*            <button className={props.filter === 'all' ? \"active-filter\" : \"\"}\r\n                    onClick={onAllClickHandler}>All\r\n            </button>\r\n            <button className={props.filter === 'active' ? \"active-filter\" : \"\"}\r\n                    onClick={onActiveClickHandler}>Active\r\n            </button>\r\n            <button className={props.filter === 'completed' ? \"active-filter\" : \"\"}\r\n                    onClick={onCompletedClickHandler}>Completed\r\n            </button>*/}\r\n        </div>\r\n    </div>\r\n}\r\n\r\n\r\n","import * as React from 'react';\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Box from '@mui/material/Box';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport Typography from '@mui/material/Typography';\r\nimport Button from '@mui/material/Button';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport MenuIcon from '@mui/icons-material/Menu';\r\n\r\nexport default function ButtonAppBar() {\r\n    return (\r\n        <Box sx={{ flexGrow: 1 }}>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton\r\n                        size=\"large\"\r\n                        edge=\"start\"\r\n                        color=\"inherit\"\r\n                        aria-label=\"menu\"\r\n                        sx={{ mr: 2 }}\r\n                    >\r\n                        <MenuIcon />\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\" component=\"div\" sx={{ flexGrow: 1 }}>\r\n                        Список задач\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n        </Box>\r\n    );\r\n}\r\n","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {TaskType, Todolist} from './Todolist';\r\nimport {v1} from 'uuid';\r\nimport {AddItemForm} from './AddItemForm';\r\nimport ButtonAppBar from \"./AppBar\";\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\ntype TodolistType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\ntype TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n\r\nfunction App() {\r\n    function removeTask(id: string, todolistId: string) {\r\n        //достанем нужный массив по todolistId:\r\n        let todolistTasks = tasks[todolistId];\r\n        // перезапишем в этом объекте массив для нужного тудулиста отфилтрованным массивом:\r\n        tasks[todolistId] = todolistTasks.filter(t => t.id !== id);\r\n        // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\r\n        setTasks({...tasks});\r\n    }\r\n\r\n    function addTask(title: string, todolistId: string) {\r\n        let task = {id: v1(), title: title, isDone: false};\r\n        //достанем нужный массив по todolistId:\r\n        let todolistTasks = tasks[todolistId];\r\n        // перезапишем в этом объекте массив для нужного тудулиста копией, добавив в начало новую таску:\r\n        tasks[todolistId] = [task, ...todolistTasks];\r\n        // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\r\n        setTasks({...tasks});\r\n    }\r\n\r\n    function changeFilter(value: FilterValuesType, todolistId: string) {\r\n        let todolist = todolists.find(tl => tl.id === todolistId);\r\n        if (todolist) {\r\n            todolist.filter = value;\r\n            setTodolists([...todolists])\r\n        }\r\n    }\r\n\r\n    function changeStatus(id: string, isDone: boolean, todolistId: string) {\r\n        //достанем нужный массив по todolistId:\r\n        let todolistTasks = tasks[todolistId];\r\n        // найдём нужную таску:\r\n        let task = todolistTasks.find(t => t.id === id);\r\n        //изменим таску, если она нашлась\r\n        if (task) {\r\n            task.isDone = isDone;\r\n            // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\r\n            setTasks({...tasks});\r\n        }\r\n    }\r\n\r\n    function changeTaskTitle(id: string, newTitle: string, todolistId: string) {\r\n        //достанем нужный массив по todolistId:\r\n        let todolistTasks = tasks[todolistId];\r\n        // найдём нужную таску:\r\n        let task = todolistTasks.find(t => t.id === id);\r\n        //изменим таску, если она нашлась\r\n        if (task) {\r\n            task.title = newTitle;\r\n            // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\r\n            setTasks({...tasks});\r\n        }\r\n    }\r\n\r\n    function removeTodolist(id: string) {\r\n        // засунем в стейт список тудулистов, id которых не равны тому, который нужно выкинуть\r\n        setTodolists(todolists.filter(tl => tl.id !== id));\r\n        // удалим таски для этого тудулиста из второго стейта, где мы храним отдельно таски\r\n        delete tasks[id]; // удаляем св-во из объекта... значением которого являлся массив тасок\r\n        // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\r\n        setTasks({...tasks});\r\n    }\r\n\r\n    function changeTodolistTitle(id: string, title: string) {\r\n        // найдём нужный todolist\r\n        const todolist = todolists.find(tl => tl.id === id);\r\n        if (todolist) {\r\n            // если нашёлся - изменим ему заголовок\r\n            todolist.title = title;\r\n            setTodolists([...todolists]);\r\n        }\r\n    }\r\n\r\n    let todolistId1 = v1();\r\n    let todolistId2 = v1();\r\n\r\n    let [todolists, setTodolists] = useState<Array<TodolistType>>([\r\n        {id: todolistId1, title: \"Что выучить?\", filter: \"all\"},\r\n        {id: todolistId2, title: \"Что купить?\", filter: \"all\"}\r\n    ])\r\n\r\n    let [tasks, setTasks] = useState<TasksStateType>({\r\n        [todolistId1]: [\r\n            {id: v1(), title: \"Прочитать про Redux\", isDone: false},\r\n            {id: v1(), title: \"Повторить CSS\", isDone: true},\r\n            {id: v1(), title: \"Сделать задачу на Codewars\", isDone: true},\r\n        ],\r\n        [todolistId2]: [\r\n            {id: v1(), title: \"Купить минералку\", isDone: false},\r\n            {id: v1(), title: \"Купить молоко\", isDone: true},\r\n            {id: v1(), title: \"Купить бананы\", isDone: true}\r\n        ]\r\n    });\r\n\r\n    function addTodolist(title: string) {\r\n        let newTodolistId = v1();\r\n        let newTodolist: TodolistType = {id: newTodolistId, title: title, filter: 'all'};\r\n        setTodolists([newTodolist, ...todolists]);\r\n        setTasks({\r\n            ...tasks,\r\n            [newTodolistId]: []\r\n        })\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <ButtonAppBar/>\r\n            <div className=\"App\">\r\n                <div>\r\n                    <h4>Добавить новый список</h4>\r\n                    <AddItemForm addItem={addTodolist}/>\r\n                </div>\r\n                {\r\n                    todolists.map(tl => {\r\n                        let allTodolistTasks = tasks[tl.id];\r\n                        let tasksForTodolist = allTodolistTasks;\r\n\r\n                        if (tl.filter === \"active\") {\r\n                            tasksForTodolist = allTodolistTasks.filter(t => t.isDone === false);\r\n                        }\r\n                        if (tl.filter === \"completed\") {\r\n                            tasksForTodolist = allTodolistTasks.filter(t => t.isDone === true);\r\n                        }\r\n\r\n                        return <Todolist\r\n                            key={tl.id}\r\n                            id={tl.id}\r\n                            title={tl.title}\r\n                            tasks={tasksForTodolist}\r\n                            removeTask={removeTask}\r\n                            changeFilter={changeFilter}\r\n                            addTask={addTask}\r\n                            changeTaskStatus={changeStatus}\r\n                            filter={tl.filter}\r\n                            removeTodolist={removeTodolist}\r\n                            changeTaskTitle={changeTaskTitle}\r\n                            changeTodolistTitle={changeTodolistTitle}\r\n                        />\r\n\r\n                    })\r\n                }\r\n\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}